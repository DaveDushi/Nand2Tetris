// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen;
	static Array twoToTheX; //2^x | 0 <= x < 16
	static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384; 
		let color = true;
		let twoToTheX = Array.new(16);
        //set the values of twoToTheX
		let twoToTheX[0] = 1;
		let twoToTheX[1] = 2;
		let twoToTheX[2] = 4;
		let twoToTheX[3] = 8;
		let twoToTheX[4] = 16;
		let twoToTheX[5] = 32;
		let twoToTheX[6] = 64;
		let twoToTheX[7] = 128;
		let twoToTheX[8] = 256;
		let twoToTheX[9] = 512;
		let twoToTheX[10] = 1024;
		let twoToTheX[11] = 2048;
		let twoToTheX[12] = 4096;
		let twoToTheX[13] = 8192;
		let twoToTheX[14] = 16384;
		let twoToTheX[15] = 16384 + 16384; // 32768 is too large to represent as a single value
		return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
		let i = 0;
		while(i < 8192) {  // set each address to 0 
		    let screen[i] = 0;
		}
		return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b; 
		return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, bit, setColor;
		let address = (x / 16) + (y * 32); //address of the pixel 
		let bit = x - ((x / 16) * 16); // get the bit of the pixel in the address, bit = col%16
		// set pixel at location 'bit' to color;
		let setColor = twoToTheX[bit];
		if(color) {
			let screen[address] = screen[address] | setColor; // black pixel
		} else {
			let screen[address] = screen[address] & ~setColor; // white pixel
		}
		return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy;
        var int tempX;
        var int tempY;
        var int startAddr, endAddr;
        var int x1mod16, x2mod16;
        var int hx;
        var int a, b;
        var int adyMinusbdx;
        var int yInc; 
        
        // set x1 <= x2 if needed
        if(x1 > x2) {
            let tempX = x1;
            let x1 = x2;
            let x2 = tempX;
            let tempX = y1;
            let y1 = y2;
            let y2 = tempX;
        }

        let dx = x2 - x1;
        let dy = y2 - y1;

        //draw vertical line
        if(dx = 0) {
        // set y1 <= y2 if needed
            if(y1 > y2) {
                let tempY = y1;
                let y1 = y2;
                let y2 = tempY;
            }
            
            while(y1 < y2) {
                do Screen.drawPixel(x1, y1);
                let y1 = y1 + 1;
            }

        } else { 
            //draw horizontal line
            if(dy = 0) {    
                let x1mod16 = x1 & 15;
                let x2mod16 = x2 & 15;
                let startAddr = (y1 * 32) + (x1 / 16);
                let endAddr = (y1 * 32) + (x2 / 16) + (x2mod16 = 0);

                if(startAddr = endAddr) {   // line starts and ends within the same screen address
                    while(x1 < x2) {
                        do Screen.drawPixel(x1, y1);
                        let x1 = x1 + 1;
                    }
                } else { //over multiple adresses
                    if(~(x1mod16 = 0)) { // the address it starts with color only needed bits 
                        let startAddr = startAddr + 1;
                        let hx = x1 + 16 - x1mod16;
                        while(~(x1 > hx)) {
                            do Screen.drawPixel(x1, y1);
                            let x1 = x1 + 1;
                        }
                    }
                    if(~(x2mod16 = 0)) {  // the addresss it ends with color only needed bits 
                        let endAddr = endAddr - 1;
                        let hx = x2 - x2mod16;
                        while(~(hx > x2)) {
                            do Screen.drawPixel(hx, y1);
                            let hx = hx + 1;
                        }
                    }
                    while(~(startAddr > endAddr)) {  // the addresses in the middle 
                        let screen[startAddr] = color;
                        let startAddr = startAddr + 1;
                    }
                }
            } else { //draw diagonal line
                //initialize a,b adyMinusbdx to 0
                let a = 0;
                let b = 0;
                let adyMinusbdx = 0;
                // if y2 > y1 we decrement y 
                if(dy < 0) {
                    let yInc = -1;
                }
                else {
                    let yInc = 1;
                }

                while((a < dx) & (((yInc = 1) & (b < dy)) | ((yInc = -1) & (b > dy)))) {
                    do Screen.drawPixel(x1 + a, y1 + b);
                    if(adyMinusbdx < 0) {
                        let a = a + 1;
                        let adyMinusbdx = adyMinusbdx + (dy * yInc);
                    }
                    else {
                        let b = b + yInc;
                        let adyMinusbdx = adyMinusbdx - dx;
                    }
                }
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
		// draw horizontal line
        do Screen.drawLine(x1, y1, x2, y1);
        // inc y1 until its == y2 and draw a horizontal line each time
		while(~(y1 = y2)) {
			let y1 = y1 + 1;
			do Screen.drawLine(x1, y1, x2, y1);
		}
		return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy;
		var int rSquared;
		let dy = -r;
		let rSquared = r * r;
		while((dy < r)){
			let dx = Math.sqrt(rSquared - (dy * dy));
			do Screen.drawLine(x - dx, y + dy, x + dx, y + dy);
			let dy = dy + 1;
		}
		return;
    }
}
